@model DataLayer.Models.Folder

<style>
    .folder-label {
        cursor: pointer;
        user-select: none;
    }

    .toggle-arrow.collapsed {
        transform: rotate(0deg);
        transition: transform 0.2s ease;
    }

    .toggle-arrow:not(.collapsed) {
        transform: rotate(90deg);
        transition: transform 0.2s ease;
    }

    .document-item {
        user-select: none;
    }

        .document-item:hover {
            background-color: #f0f0f0;
        }

</style>

<li class="list-group-item d-flex justify-content-between align-items-center folder-item" data-folder-id="@Model.Id">
    <div class="folder-label d-flex align-items-center gap-2">
        <i class="bi bi-chevron-right toggle-arrow collapsed"
           style="cursor:pointer;"
           data-bs-toggle="collapse"
           data-bs-target="#folder-@Model.Id"
           aria-expanded="false"
           aria-controls="folder-@Model.Id"></i>
        <div class="folder-name folder-clickable" data-folder-id="@Model.Id">@Model.Name</div>

    </div>

    <div class="dropdown">
        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton-@Model.Id" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-three-dots"></i>
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-@Model.Id">
            <li><a class="dropdown-item add-subfolder" href="#" data-folder-id="@Model.Id">Add Subfolder</a></li>
            <li>
                <a class="dropdown-item"
                   href="@Url.Action("Upload", "ProjectDocument", new { folderId = Model.Id, projectId = ViewBag.ProjectId })">
                    Upload Document
                </a>
            </li>
            <li>
                <a class="dropdown-item"
                   href="@Url.Action("Upload", "ProjectDocument", new { folderId = Model.Id, projectId = ViewBag.ProjectId })">
                    Add To Review
                </a>
            </li>
            <li>
                <button type="button"
                        class="dropdown-item delete-folder-btn"
                        data-folder-id="@Model.Id"
                        data-folder-name="@Model.Name">
                    Delete Folder
                </button>
            </li>

        </ul>

    </div>
</li>

@if ((Model.SubFolders != null && Model.SubFolders.Any()) || (Model.Documents != null && Model.Documents.Any()))
{
    <ul class="list-group folder-tree collapse" id="folder-@Model.Id">
        @* Render documents as list items at the same level *@
        @if (Model.Documents != null && Model.Documents.Any())
        {
            @foreach (var doc in Model.Documents)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center document-item" data-document-id="@doc.Id">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-file-earmark-text me-2"></i>
                        <span>@doc.Name</span>
                    </div>

                    <div class="dropdown">
                        <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="documentDropdown-@doc.Id" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="documentDropdown-@doc.Id">
                            <li>
                                <a class="dropdown-item" href="@Url.Action("OpenFile", "ProjectDocument", new { documentId = doc.Id})">
                                    View File
                                </a>
                            </li>
                            <li><a class="dropdown-item copy-document" href="#" data-document-id="@doc.Id">Copy To...</a></li>
                            <li><a class="dropdown-item move-document" href="#" data-document-id="@doc.Id">Move To...</a></li>
                        </ul>
                    </div>
                </li>

            }
        }
        @* Render subfolders as list items (recursively) *@
        @if (Model.SubFolders != null && Model.SubFolders.Any())
        {
            @foreach (var subfolder in Model.SubFolders)
            {
                @await Html.PartialAsync("_FolderTree", subfolder)
            }
        }

    </ul>
}



<script>
      document.addEventListener('DOMContentLoaded', function () {
        // Toggle arrow rotation
        document.querySelectorAll('.toggle-arrow').forEach(arrow => {
            arrow.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.toggle('collapsed');
            });
        });

        // Prevent dropdown-toggle button clicks from bubbling to document-item
        document.querySelectorAll('.dropdown-toggle').forEach(button => {
            button.addEventListener('click', function (e) {
                e.stopPropagation(); // Stop click from reaching document-item
            });
        });

        // Prevent dropdown menu item clicks from bubbling to document-item
        document.querySelectorAll('.dropdown-menu .dropdown-item').forEach(item => {
            item.addEventListener('click', function (e) {
                e.stopPropagation(); // Stop click from reaching document-item

                // Handle "View File" link specifically
                if (this.classList.contains('view-file')) {
                    e.preventDefault(); // Prevent default navigation
                    const url = this.getAttribute('href');
                    const contentDiv = document.getElementById('folderContent');
                    contentDiv.innerHTML = `<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>`;

                    // Fetch file content dynamically (assumes OpenFile returns HTML or JSON)
                    fetch(url)
                        .then(res => res.ok ? res.text() : Promise.reject('Failed to load'))
                        .then(html => contentDiv.innerHTML = html)
                        .catch(err => contentDiv.innerHTML = `<div class="text-danger">Error loading file content</div>`);
                }
            });
        });

        // Handle document item click
        document.querySelectorAll('.document-item').forEach(docItem => {
            docItem.addEventListener('click', function (e) {
                const target = e.target;
                // Ignore clicks originating from dropdown menu, links, or buttons
                if (target.closest('.dropdown-menu') || target.closest('a') || target.closest('button')) return;

                e.preventDefault();
                e.stopPropagation();

                const documentId = this.getAttribute('data-document-id');
                if (!documentId) return;

                const contentDiv = document.getElementById('folderContent');
                contentDiv.innerHTML = `<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>`;

                fetch(`/ProjectDocument/GetDocumentDetails/${documentId}`)
                    .then(res => res.ok ? res.text() : Promise.reject('Failed to load'))
                    .then(html => contentDiv.innerHTML = html)
                    .catch(err => contentDiv.innerHTML = `<div class="text-danger">Error loading document details</div>`);
            });
        });

        // Prevent all dropdown-item href="#" from refreshing the page
        document.querySelectorAll('a[href="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
            });
        });
    });
</script>
